const { Client, GatewayIntentBits } = require('discord.js');
const axios = require('axios');
const cheerio = require('cheerio');
const pdf = require('pdf-parse');
const cron = require('node-cron');

// 環境變數設定
const DISCORD_TOKEN = process.env.DISCORD_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID;
const TARGET_URL = 'https://www.blessing.org.tw/%E4%B8%AD%E5%A4%AE%E5%BB%9A%E6%88%BF';

// 創建Discord客戶端
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// 下載PDF的函數
async function downloadPDF(pdfUrl) {
    try {
        const response = await axios({
            method: 'GET',
            url: pdfUrl,
            responseType: 'arraybuffer',
            timeout: 30000,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });
        return Buffer.from(response.data);
    } catch (error) {
        console.error('下載PDF失敗:', error.message);
        throw error;
    }
}

// 從網站獲取PDF連結
async function getPDFLink() {
    try {
        const response = await axios.get(TARGET_URL, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });
        
        const $ = cheerio.load(response.data);
        
        // 尋找PDF連結，可能需要根據實際網站結構調整
        let pdfLink = null;
        
        // 方法1: 尋找href包含.pdf的連結
        $('a[href*=".pdf"]').each((index, element) => {
            const href = $(element).attr('href');
            if (href) {
                pdfLink = href.startsWith('http') ? href : new URL(href, TARGET_URL).href;
                return false; // 找到第一個就停止
            }
        });
        
        // 方法2: 如果沒找到，嘗試尋找可能的PDF連結
        if (!pdfLink) {
            $('a').each((index, element) => {
                const href = $(element).attr('href');
                const text = $(element).text().toLowerCase();
                if (href && (text.includes('pdf') || text.includes('菜單') || text.includes('餐點'))) {
                    pdfLink = href.startsWith('http') ? href : new URL(href, TARGET_URL).href;
                    return false;
                }
            });
        }
        
        return pdfLink;
    } catch (error) {
        console.error('獲取PDF連結失敗:', error.message);
        throw error;
    }
}

// 從PDF提取文字
async function extractTextFromPDF(pdfBuffer) {
    try {
        const data = await pdf(pdfBuffer);
        return data.text;
    } catch (error) {
        console.error('PDF文字提取失敗:', error.message);
        throw error;
    }
}

// 將長文本分割成多個訊息
function splitMessage(text, maxLength = 1900) {
    const messages = [];
    let currentMessage = '';
    
    const lines = text.split('\n');
    
    for (const line of lines) {
        if (currentMessage.length + line.length + 1 > maxLength) {
            if (currentMessage.trim()) {
                messages.push(currentMessage.trim());
            }
            currentMessage = line;
        } else {
            currentMessage += (currentMessage ? '\n' : '') + line;
        }
    }
    
    if (currentMessage.trim()) {
        messages.push(currentMessage.trim());
    }
    
    return messages;
}

// 主要功能函數
async function fetchAndPostPDF() {
    try {
        console.log('開始執行PDF下載與發布任務...');
        
        const channel = await client.channels.fetch(CHANNEL_ID);
        if (!channel) {
            console.error('找不到指定的頻道');
            return;
        }
        
        // 獲取PDF連結
        const pdfLink = await getPDFLink();
        if (!pdfLink) {
            await channel.send('❌ 無法找到PDF連結');
            return;
        }
        
        console.log('找到PDF連結:', pdfLink);
        
        // 下載PDF
        const pdfBuffer = await downloadPDF(pdfLink);
        
        // 提取文字
        const text = await extractTextFromPDF(pdfBuffer);
        
        if (!text.trim()) {
            await channel.send('❌ PDF文字提取失敗或內容為空');
            return;
        }
        
        // 發送標題訊息
        const now = new Date();
        const dateString = now.toLocaleDateString('zh-TW', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            weekday: 'long'
        });
        
        await channel.send(`📄 **${dateString} 中央廚房菜單**\n${pdfLink}`);
        
        // 分割並發送文字內容
        const messages = splitMessage(text);
        
        for (let i = 0; i < messages.length; i++) {
            await channel.send(`\`\`\`\n${messages[i]}\n\`\`\``);
            
            // 避免觸發Discord的速率限制
            if (i < messages.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        
        console.log('PDF內容發布完成');
        
    } catch (error) {
        console.error('執行任務時發生錯誤:', error);
        
        try {
            const channel = await client.channels.fetch(CHANNEL_ID);
            await channel.send(`❌ 執行任務時發生錯誤: ${error.message}`);
        } catch (channelError) {
            console.error('發送錯誤訊息失敗:', channelError);
        }
    }
}

// Discord機器人事件
client.once('ready', () => {
    console.log(`機器人已登入: ${client.user.tag}`);
    
    // 設定每週五中午12點執行
    // 分 時 日 月 週
    cron.schedule('0 12 * * 5', fetchAndPostPDF, {
        timezone: 'Asia/Taipei'
    });
    
    console.log('已設定定時任務: 每週五中午12點');
});

// 添加手動觸發指令（可選）
client.on('messageCreate', async (message) => {
    if (message.author.bot) return;
    
    if (message.content === '!pdf' && message.channelId === CHANNEL_ID) {
        await message.reply('開始手動執行PDF下載任務...');
        await fetchAndPostPDF();
    }
});

// 錯誤處理
client.on('error', (error) => {
    console.error('Discord客戶端錯誤:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('未處理的Promise拒絕:', error);
});

// 登入Discord
client.login(DISCORD_TOKEN);
